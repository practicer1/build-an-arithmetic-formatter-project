def arithmetic_arranger(problems, show_answers = None):
    if len(problems) > 5 :
        problems = 'Error: Too many problems.'
        return problems
    import re
    if len(problems) == 1:
        opperation_1 = problems[0].replace(' ','')
        for go_over in opperation_1:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_1}')
        if not mo:
            problems = 'Error: Numbers must only contain digits.'
            return problems
        A1 = mo.group(1)
        op1 = mo.group(2)
        A2 = mo.group(3)
        if len(A1) > 4 or len(A2)>4:
            problems = 'Error: Numbers cannot be more than four digits.'
            return problems
        max_len_1 = max(len(A1), len(A2)) 
        line_1 = A1.rjust(max_len_1 + 2, ' ')
        line_2 = op1 + A2.rjust(max_len_1 + 1, ' ') 
        dash = '-'*(max_len_1+2)  
        if op1 == '+':
            r1 = int(A1) + int(A2)
        elif op1 == '-':
            r1 = int(A1) - int(A2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        result = str(r1).rjust(max_len_1 + 2, ' ')  
    elif len(problems) == 2:
        opperation_1 = problems[0].replace(' ','')
        for go_over in opperation_1:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_1}')
        A1 = mo.group(1)
        op1 = mo.group(2)
        A2 = mo.group(3)
        max_len_1 = max(len(A1), len(A2)) 
        opperation_2 = problems[1].replace(' ','')
        for go_over in opperation_2:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_2}')
        B1 = mo.group(1)
        op2 = mo.group(2)
        B2 = mo.group(3)
        if len(A1) > 4 or len(A2)>4 or len(B1) > 4 or len(B2)>4:
            problems = 'Error: Numbers cannot be more than four digits.'
            return problems
        max_len_2 = max(len(B1), len(B2))
        line_1 = A1.rjust(max_len_1 + 2, ' ') + ' '*4 + B1.rjust(max_len_2 + 2, ' ') 
        line_2 = op1 + A2.rjust(max_len_1 + 1, ' ') + ' '*4+ op2 + B2.rjust(max_len_2 + 1, ' ')
        dash = '-'*(max_len_1+2) +  ' '*4 + '-'*(max_len_2+2)  
        if op1 == '+':
            r1 = int(A1) + int(A2)
        elif op1 == '-':
            r1 = int(A1) - int(A2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op2 == '+':
            r2 = int(B1) + int(B2)
        elif op2 == '-':
            r2 = int(B1) - int(B2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        result = str(r1).rjust(max_len_1 + 2, ' ') + ' '*4 + str(r2).rjust(max_len_2 + 2, ' ')
    elif len(problems) == 3:
        opperation_1 = problems[0].replace(' ','')
        for go_over in opperation_1:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_1}')
        A1 = mo.group(1)
        op1 = mo.group(2)
        A2 = mo.group(3)
        max_len_1 = max(len(A1), len(A2)) 
        opperation_2 = problems[1].replace(' ','')
        for go_over in opperation_2:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_2}')
        B1 = mo.group(1)
        op2 = mo.group(2)
        B2 = mo.group(3)
        max_len_2 = max(len(B1), len(B2))
        opperation_3 = problems[2].replace(' ','')
        for go_over in opperation_3:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*\/\*])([\d]+)',f'{opperation_3}')
        C1 = mo.group(1)
        op3 = mo.group(2)
        C2 = mo.group(3)
        if len(A1) > 4 or len(A2)>4 or len(B1) > 4 or len(B2)>4 or len(C1)>4 or len(C2)>4 :
            problems = 'Error: Numbers cannot be more than four digits.'
            return problems
        max_len_3 = max(len(C1), len(C2))
        line_1 = A1.rjust(max_len_1 + 2, ' ') + ' '*4 + B1.rjust(max_len_2 + 2, ' ') + ' '*4 + C1.rjust(max_len_3 + 2, ' ') 
        line_2 = op1 + A2.rjust(max_len_1 + 1, ' ') + ' '*4+ op2 + B2.rjust(max_len_2 + 1, ' ') + ' '*4 + op3 + C2.rjust(max_len_3 + 1, ' ') 
        dash = '-'*(max_len_1+2) +  ' '*4 + '-'*(max_len_2+2)  +  ' '*4 + '-'*(max_len_3+2)
        if op1 == '+':
            r1 = int(A1) + int(A2)
        elif op1 == '-':
            r1 = int(A1) - int(A2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op2 == '+':
            r2 = int(B1) + int(B2)
        elif op2 == '-':
            r2 = int(B1) - int(B2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op3 == '+':
            r3 = int(C1) + int(C2)
        elif op3 == '-':
            r3 = int(C1) - int(C2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        result = str(r1).rjust(max_len_1 + 2, ' ') + ' '*4 + str(r2).rjust(max_len_2 + 2, ' ') + ' '*4 + str(r3).rjust(max_len_3 + 2, ' ') 
    elif len(problems) == 4:
        opperation_1 = problems[0].replace(' ','')
        for go_over in opperation_1:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_1}')
        A1 = mo.group(1)
        op1 = mo.group(2)
        A2 = mo.group(3)
        max_len_1 = max(len(A1), len(A2)) 
        opperation_2 = problems[1].replace(' ','')
        for go_over in opperation_2:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_2}')
        B1 = mo.group(1)
        op2 = mo.group(2)
        B2 = mo.group(3)
        max_len_2 = max(len(B1), len(B2))
        opperation_3 = problems[2].replace(' ','')
        for go_over in opperation_3:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_3}')
        C1 = mo.group(1)
        op3 = mo.group(2)
        C2 = mo.group(3)
        max_len_3 = max(len(C1), len(C2))
        opperation_4 = problems[3].replace(' ','') 
        for go_over in opperation_4:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_4}')
        D1 = mo.group(1)
        op4 = mo.group(2)
        D2 = mo.group(3)
        if len(A1) > 4 or len(A2)>4 or len(B1) > 4 or len(B2)>4 or len(C1)>4 or len(C2)>4 or len(D1)>4 or len(D2)>4:
            problems = 'Error: Numbers cannot be more than four digits.'
            return problems
        max_len_4 = max(len(D1), len(D2))
        line_1 = A1.rjust(max_len_1 + 2, ' ') + ' '*4 + B1.rjust(max_len_2 + 2, ' ') + ' '*4 + C1.rjust(max_len_3 + 2, ' ') + ' '*4 + D1.rjust(max_len_4 + 2, ' ')
        line_2 = op1 + A2.rjust(max_len_1 + 1, ' ') + ' '*4+ op2 + B2.rjust(max_len_2 + 1, ' ') + ' '*4 + op3 + C2.rjust(max_len_3 + 1, ' ') + ' '*4+ op4 + D2.rjust(max_len_4 + 1, ' ')
        dash = '-'*(max_len_1+2) +  ' '*4 + '-'*(max_len_2+2)  +  ' '*4 + '-'*(max_len_3+2) +  ' '*4 + '-'*(max_len_4+2)
        if op1 == '+':
            r1 = int(A1) + int(A2)
        elif op1 == '-':
            r1 = int(A1) - int(A2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op2 == '+':
            r2 = int(B1) + int(B2)
        elif op2 == '-':
            r2 = int(B1) - int(B2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op3 == '+':
            r3 = int(C1) + int(C2)
        elif op3 == '-':
            r3 = int(C1) - int(C2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op4 == '+':
            r4 = int(D1) + int(D2)
        elif op4 == '-':
            r4 = int(D1) - int(D2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        result = str(r1).rjust(max_len_1 + 2, ' ') + ' '*4 + str(r2).rjust(max_len_2 + 2, ' ') + ' '*4 + str(r3).rjust(max_len_3 + 2, ' ') + ' '*4 + str(r4).rjust(max_len_4 + 2, ' ')
    else:
        opperation_1 = problems[0].replace(' ','')
        for go_over in opperation_1:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_1}')
        A1 = mo.group(1)
        op1 = mo.group(2)
        A2 = mo.group(3)
        max_len_1 = max(len(A1), len(A2)) 
        opperation_2 = problems[1].replace(' ','')
        for go_over in opperation_2:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_2}')
        B1 = mo.group(1)
        op2 = mo.group(2)
        B2 = mo.group(3)
        max_len_2 = max(len(B1), len(B2))
        opperation_3 = problems[2].replace(' ','')
        for go_over in opperation_3:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_3}')
        C1 = mo.group(1)
        op3 = mo.group(2)
        C2 = mo.group(3)
        max_len_3 = max(len(C1), len(C2))
        opperation_4 = problems[3].replace(' ','') 
        for go_over in opperation_4:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_4}')
        D1 = mo.group(1)
        op4 = mo.group(2)
        D2 = mo.group(3)
        max_len_4 = max(len(D1), len(D2))
        opperation_5 = problems[4].replace(' ','') 
        for go_over in opperation_5:
            if not go_over.isdigit() and not ( go_over == '-' or go_over =='+' or go_over =='/' or go_over =='*'):
                problems = 'Error: Numbers must only contain digits.'
                return problems
        mo = re.match('([\d]+)([\+\-\/\*])([\d]+)',f'{opperation_5}')
        E1 = mo.group(1)
        op5 = mo.group(2)
        E2 = mo.group(3)
        if len(A1) > 4 or len(A2)>4 or len(B1) > 4 or len(B2)>4 or len(C1)>4 or len(C2)>4 or len(D1)>4 or len(D2)>4 or len(E1)>4 or len(E2)>4:
            problems = 'Error: Numbers cannot be more than four digits.'
            return problems
        max_len_5 = max(len(E1), len(E2))
        line_1 = A1.rjust(max_len_1 + 2, ' ') + ' '*4 + B1.rjust(max_len_2 + 2, ' ') + ' '*4 + C1.rjust(max_len_3 + 2, ' ') + ' '*4 + D1.rjust(max_len_4 + 2, ' ') + ' '*4 + E1.rjust(max_len_5 + 2, ' ')
        line_2 = op1 + A2.rjust(max_len_1 + 1, ' ') + ' '*4+ op2 + B2.rjust(max_len_2 + 1, ' ') + ' '*4 + op3 + C2.rjust(max_len_3 + 1, ' ') + ' '*4+ op4 + D2.rjust(max_len_4 + 1, ' ') + ' '*4+ op5 + E2.rjust(max_len_5 + 1, ' ')
        dash = '-'*(max_len_1+2) +  ' '*4 + '-'*(max_len_2+2)  +  ' '*4 + '-'*(max_len_3+2) +  ' '*4 + '-'*(max_len_4+2) +  ' '*4 + '-'*(max_len_5+2)
        if op1 == '+':
            r1 = int(A1) + int(A2)
        elif op1 == '-':
            r1 = int(A1) - int(A2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op2 == '+':
            r2 = int(B1) + int(B2)
        elif op2 == '-':
            r2 = int(B1) - int(B2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op3 == '+':
            r3 = int(C1) + int(C2)
        elif op3 == '-':
            r3 = int(C1) - int(C2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op4 == '+':
            r4 = int(D1) + int(D2)
        elif op4 == '-':
            r4 = int(D1) - int(D2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        if op5 == '+':
            r5 = int(E1) + int(E2)
        elif op5 == '-':
            r5 = int(E1) - int(E2)
        else:
            problems = "Error: Operator must be '+' or '-'."
            return problems
        result = str(r1).rjust(max_len_1 + 2, ' ') + ' '*4 + str(r2).rjust(max_len_2 + 2, ' ') + ' '*4 + str(r3).rjust(max_len_3 + 2, ' ') + ' '*4 + str(r4).rjust(max_len_4 + 2, ' ') + ' '*4 + str(r5).rjust(max_len_5 + 2, ' ')    
    if show_answers == True :
        problems = f'{line_1}\n{line_2}\n{dash}\n{result}'
    elif show_answers == None :
        problems = f'{line_1}\n{line_2}\n{dash}'
    return problems

print(arithmetic_arranger(["3801 - 2", "123 + 49"]))
print(arithmetic_arranger(["1 + 2", "1 - 9380"]))
print(arithmetic_arranger(["3 + 855", "3801 - 2", "45 + 43", "123 + 49"]))
print(arithmetic_arranger(["11 + 4", "3801 - 2999", "1 + 2", "123 + 49", "1 - 9380"]))
print(arithmetic_arranger(["32 - 698", "1 - 3801", "45 + 43", "123 + 49", "988 + 40"], True))
print(arithmetic_arranger(["44 + 815", "909 - 2", "45 + 43", "123 + 49", "888 + 40", "653 + 87"]))
print(arithmetic_arranger(["3 / 855", "3801 - 2", "45 + 43", "123 + 49"]))
print(arithmetic_arranger(["24 + 85215", "3801 - 2", "45 + 43", "123 + 49"]))
print(arithmetic_arranger(["98 + 3g5", "3801 - 2", "45 + 43", "123 + 49"]))
